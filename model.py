# -*- coding: utf-8 -*-
"""DM-do-an.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11e_4ANd2hz_a8A-ht8-BbBc9msfHV5jt
"""

# Nap cac thu vien can thiet
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
from sklearn.preprocessing import StandardScaler

# Doc du lieu tu file excel
rice_df = pd.read_excel("Rice_Osmancik_Cammeo_Dataset.xlsx")
# rice_df.describe()

# Chia tap du lieu theo nghi thuc Hold-out voi ti ly 7/3
data = rice_df.iloc[:, :-1]
target = rice_df.iloc[:, -1]

X_train, X_test, y_train, y_test = train_test_split(data, target,
                                                    test_size=0.3,
                                                    random_state=100)

scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)
# print(len(rice_df))
# print(rice_df['CLASS'].value_counts())
# print(len(X_train), len(X_test))
# print(y_train.value_counts(), y_test.value_counts())

# Xay dung mo hinh cay quyet dinh
dt_model = []
dt_predict = []
dt_acc_score = []

# Xay dung mo hinh voi max_depth tu 3 - 20 de tim ra do sau tot nhat
for d in range(3, 20):
    m = DecisionTreeClassifier(
        criterion="entropy", max_depth=d, random_state=100)
    dt_model.append(m)
    m.fit(X_train, y_train)
    pred = m.predict(X_test)
    dt_predict.append(pred)
    dt_acc_score.append(accuracy_score(y_test, pred))

# print(dt_predict)
# print(np.array([dt_acc_score]).T)
# KL: max_depth = 3 dem lai do chinh xac cao nhat (0.926)

# Luu lai Decision Tree model
DecisionTreeModel = './riceclassify/static/decision_tree_model.sav'
pickle.dump(dt_model[0], open(DecisionTreeModel, 'wb'))

# Xay dung mo hinh Naive Bayes voi phan phoi Gauss
nb_model = GaussianNB()
nb_model.fit(X_train, y_train)
nb_pred = nb_model.predict(X_test)
nb_acc_score = accuracy_score(y_test, pred)
# print(nb_pred)
# print(nb_acc_score)
# KL: Naive Bayes co do chinh xac la 0.905

# Luu lai Naive Bayes model
NaiveBayesModel = './riceclassify/static/naive_bayes_model.sav'
pickle.dump(nb_model, open(NaiveBayesModel, 'wb'))


# Xay dung mo hinh SVM
kernel = ["linear", "poly", "rbf", "sigmoid"]
svm_model = []
svm_predict = []
svm_acc_score = []

# Thu xay dung mo hinh voi kernel khac nhau
for k in kernel:
    m = SVC(kernel=k)
    m.fit(X_train, y_train)
    pred = m.predict(X_test)
    acc = accuracy_score(y_test, pred)
    svm_model.append(m)
    svm_predict.append(pred)
    svm_acc_score.append(acc)

# print(svm_predict)
# print(svm_acc_score)
# KL: SVM voi kernel la linear co do chinh xac cao nhat (0.932)

# Luu lai SVM model
SVMModel = './riceclassify/static/svm_model.sav'
pickle.dump(svm_model[0], open(SVMModel, 'wb'))

scaler.fit(data)
data = scaler.transform(data)
model = SVC(kernel='linear')
model.fit(data, target)
model.scaler = scaler
pickle.dump(model, open('./riceclassify/static/model.sav', 'wb'))

y = svm_model[0].predict([[15231.0, 525.578979492188, 229.749877929687,
                           85.0937881469727, 0.928882002830505, 15617.0, 0.572895526885986]])

print(y)
